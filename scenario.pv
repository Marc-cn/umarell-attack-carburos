(* A standard DY attacker attempts to violate the MFA protocol security compromising the confidentiality of the token. The attacker controls the network infrastructure, including the NLOS channels, but cannot interfere with the LOS channels. This scenario features a roadway with two RSUs and two vehicles.
The scenario is extended by introducing the Umarell attacker who interferes with the LOS channels. *)

##################################################################################

set traceDisplay = long.
set attacker = active.

(* CARBUROS BASE AUTH PROTOCOL *)
(* 
1. V -> RA     : squawk, loc
2. RA -> V     : RSUdata
3. V -> RSU    : {squawk, bitmask}_pubRSU
4. RSU -> V    : xor(chall, bitmask)
5. V ->_opt RSU: chall
6. V -> RA    : {squawk_Vehicle, chall_Vehicle}_privV
7. RSU -> RA   : squawk, chall
8. RA -> V    : {token}_privRA
*)

(* Types *)
type skey. (* private key *)
type pkey. (* public key *)

(* Channels *)
free v_RSU1_chan: channel. (* public channel, Dolev-Yao model Open Channel *)
free v_RSU2_chan: channel. (* public channel, Dolev-Yao model Open Channel *)
free v_RA_chan: channel [private]. (* private channel between vehicle and RA. TLS *)
free RSU_RA_chan : channel [private]. (* private channel between RSU and RA. TLS *)
free public_optical_chan: channel. (* Public channel for agent mode 0 forwarding *)
free oracle_chan: channel [private]. (* private test channel *)

(* Private optical agent channels for communication between vehicle, agent, and RSU *)
free agent_v1_chan_optical: channel [private]. (* Private channel from vehicle to agent *)
free agent_RSU1_chan_optical: channel [private]. (* Private channel from agent to RSU *)
free agent_v2_chan_optical: channel [private]. (* Private channel from vehicle to agent *)
free agent_RSU2_chan_optical: channel [private]. (* Private channel from agent to RSU *)

(* Attacker-controllable channels for interacting with the optical channels *)
free setting_mode_chan_RSU1: channel.
free setting_mode_chan_RSU2: channel.

free token1: bitstring [private]. (* token, generated by RA, to authenticate the vehicle *)
free squawk1: bitstring. (* squawk number, generated by RA and assigned during the enrollment *)
free bitMask1: bitstring [private]. (* Bit Mask, 6-bit mask generated by the vehicle *)
free chall1: bitstring [private]. (* Challenge, 6-bit challenge generated by the RSU *)

free token2: bitstring [private]. (* token, generated by RA, to authenticate the vehicle *)
free squawk2: bitstring. (* squawk number, generated by RA and assigned during the enrollment *)
free bitMask2: bitstring [private]. (* Bit Mask, 6-bit mask generated by the vehicle *)
free chall2: bitstring [private]. (* Challenge, 6-bit challenge generated by the RSU *)

(* Keys *)
free Prkey_vehicle1: skey [private].
free Prkey_vehicle2: skey [private].
free Prkey_RA: skey [private].
free Prkey_RSU1: skey [private].
free Prkey_RSU2: skey [private].

(* Mode constants *)
free eavesdrop: bitstring.
free destroy: bitstring.

(* Tables *)
table keytable(bitstring, pkey). (* maps squawk to keys *)
table toktable(bitstring, bitstring). (* maps squawk to the right token *)
table loctable(bitstring, channel). (* maps location to RSU *)

(* Constructors *)

(* Cryptographic functions *)
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall m: bitstring, k: skey; adec(aenc(m, pk(k)), k) = m.

(* fun hash(bitstring): bitstring. *)

fun sign(bitstring, skey): bitstring.
reduc forall m: bitstring, k: skey; checksign(sign(m, k), pk(k)) = m.
reduc forall m: bitstring, k: skey; getmess(sign(m, k)) = m.

(* XOR *)
fun xor(bitstring, bitstring): bitstring.
fun rox(bitstring, bitstring): bitstring.
equation forall m1: bitstring, m2: bitstring; rox(m2, xor(m1, m2)) = m1.

(* Events *)
event success.

(* Queries *)
query attacker(token1).
query attacker(token2).
query event(success).

(* Processes Auth *)

(* Vehicle process *)
let Vehicle(loc: bitstring, v_RA_chan: channel, agent_v_chan_optical: channel, setting_mode_chan: channel, Prkey_vehicle: skey, squawk_Vehicle: bitstring, bitMask_Vehicle: bitstring) =
    
    (* 1. V -> RA : squawk, loc *)
    out (v_RA_chan, (squawk_Vehicle, loc));

    (* 2. RA -> V : RSUdata *)
    in (v_RA_chan, v_RSU_chan_vehicle: channel);

    (* 3. V -> RSU : {squawk, bitmask}_pubRSU *)
    get loctable(=loc, v_RSU_chan_vehicle) in (* Look up the corresponding RSU for the vehicle's location *)
    let Prkey_RSU = if v_RSU_chan_vehicle = v_RSU1_chan then Prkey_RSU1 else Prkey_RSU2 in (* Fetch the public key of the correct RSU based on location *)
    out (v_RSU_chan_vehicle, aenc((squawk_Vehicle, bitMask_Vehicle), pk(Prkey_RSU)));

    (* 4. RSU -> V : xor(chall, bitmask) *)
    out (setting_mode_chan, eavesdrop); (* Necessary to enable the optical chan *)
    in (v_RSU_chan_vehicle, chall_XOR_Vehicle: bitstring);   

    (* 5. V ->_opt RSU : chall *)
    let chall_Vehicle = rox(bitMask_Vehicle, chall_XOR_Vehicle) in
    out (agent_v_chan_optical, chall_Vehicle); (* Send challenge to the optical agent *)

    (* 6. V -> RA : {squawk_Vehicle, chall_Vehicle}_privV *)
    out (v_RA_chan, sign((squawk_Vehicle, chall_Vehicle), Prkey_vehicle));

    (* 8. RA -> V : {token}_privRA *)
    in (v_RA_chan, token_signed_Vehicle: bitstring);
    let token_digest_Vehicle = adec(token_signed_Vehicle, Prkey_vehicle) in
    let token_Vehicle = checksign(token_digest_Vehicle, pk(Prkey_RA)) in
    out (oracle_chan, (squawk_Vehicle, token_Vehicle)).


(* RSU process *)
let RSU(agent_RSU_chan_optical: channel, v_RSU_chan: channel, chall_RSU: bitstring, Prkey_RSU: skey) =
    
    (* 3. V -> RSU    : {squawk, bitmask}_pubRSU *)
    in (v_RSU_chan, chall_info: bitstring);

    (* 4. RSU -> V    : xor(chall, bitmask) *)
    let (squawk_RSU: bitstring, bitMask_RSU: bitstring) = adec(chall_info, Prkey_RSU) in
    out (v_RSU_chan, xor(chall_RSU, bitMask_RSU));

    (* 5. V ->_opt RSU: chall *)
    in (agent_RSU_chan_optical, =chall_RSU); (* Receive challenge from the optical agent *)

    (* 7. RSU -> RA   : squawk, chall *)
    out (RSU_RA_chan , (squawk_RSU, chall_RSU)).

(* RA process *)
let RA() =

    (* 1. V -> RA : squawk, loc *)
    in (v_RA_chan, (squawk_RA: bitstring, loc: bitstring));

    (* 2. RA -> V : RSUdata *)
    get loctable(=loc, v_RSU_RA) in
    get keytable(=squawk_RA, PubKey_vehicle) in
    out (v_RA_chan, v_RSU_RA);

    (* 6. V -> RA : {squawk_Vehicle, chall_Vehicle}_privV *)
    in (v_RA_chan, signed_msg_RA: bitstring);

    (* 7. RSU -> RA   : squawk, chall *)
    in (RSU_RA_chan , (=squawk_RA, RA_C_t: bitstring));

    let (squawk_RA_recv: bitstring, chall_RA_recv: bitstring) = checksign(signed_msg_RA, PubKey_vehicle) in
    if (squawk_RA_recv = squawk_RA) then
        (* Check *)
        if (chall_RA_recv = RA_C_t) then
            new token_RA: bitstring;
            insert toktable(squawk_RA, token_RA);

            (* 8. RA -> V : {token}_privRA *)
            out (v_RA_chan, aenc(sign(token_RA, Prkey_RA), PubKey_vehicle)).


(* ORACLE process *)
let ORACLE =
    in (oracle_chan, (squawk_ORACLE: bitstring, token_ORACLE: bitstring));
    get toktable(=squawk_ORACLE, right_token) in
    if token_ORACLE = right_token
        then event success.

(* Optical agent process *)
let OptChan_Ag(agent_v_chan_optical: channel, agent_RSU_chan_optical: channel, setting_mode_chan: channel) =
    
    in (setting_mode_chan, mode: bitstring);

    in (agent_v_chan_optical, msg: bitstring);
    
    (* Pattern matching on mode *)
    (* If mode is eavesdrop, forward the message to both RSU and public chan *)
    if mode = eavesdrop then
        out (agent_RSU_chan_optical, msg); (* Forward to RSU *)
        out (public_optical_chan, msg). (* Forward to public chan *)
        
(* Final process block *)
process
    new loc1: bitstring;
    new loc2: bitstring;
    insert keytable(squawk1, pk(Prkey_vehicle1));
    insert keytable(squawk2, pk(Prkey_vehicle2));
    insert loctable(loc1, v_RSU1_chan);
    insert loctable(loc2, v_RSU2_chan);

    (* Vehicle 1 and Optical Agent 1 for RSU1 *)
    Vehicle(loc1, v_RA_chan, agent_v1_chan_optical, setting_mode_chan_RSU1, Prkey_vehicle1, squawk1, bitMask1) |
    OptChan_Ag(agent_v1_chan_optical, agent_RSU1_chan_optical, setting_mode_chan_RSU1) |

    (* Vehicle 2 and Optical Agent 2 for RSU2 *)
    Vehicle(loc2, v_RA_chan, agent_v2_chan_optical, setting_mode_chan_RSU2, Prkey_vehicle2, squawk2, bitMask2) |
    OptChan_Ag(agent_v2_chan_optical, agent_RSU2_chan_optical, setting_mode_chan_RSU2) |

    (* RSUs and RA *)
    RSU(agent_RSU1_chan_optical, v_RSU1_chan, chall1, Prkey_RSU1) |
    RSU(agent_RSU2_chan_optical, v_RSU2_chan, chall2, Prkey_RSU2) |
    RA() | ORACLE()
